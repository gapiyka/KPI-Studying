------------
[Program.cs]:
------------

namespace Lab
{
    class Program
    {
        static void Main(string[] args)
        {
            //FaceEncoding encoding = new FaceEncoding();
            FaceRecognitionImages fri = new FaceRecognitionImages();
        }
    }

}


------------
[Utils.cs]:
------------

using System;
using System.Collections.Generic;
using DlibDotNet;
using DlibDotNet.Dnn;
using System.IO;
using Numpy;

namespace Lab
{
    class Utils
    {
        public static string dir = "..\\..\\..\\src\\";
        public static string rootDir = dir + "dataset\\";
        public static string models = dir + "models\\";
        static string fe = models + "dlib_face_recognition_resnet_model_v1.dat";
        static string sp = models + "shape_predictor_68_face_landmarks.dat";
        public static FrontalFaceDetector faceDetector = Dlib.GetFrontalFaceDetector();
        // use a face landmarking model to align faces to a standard pose
        public static ShapePredictor shapePredictor = ShapePredictor.Deserialize(sp);
        // load the DNN responsible for face recognition.
        public static LossMetric faceEncoder = LossMetric.Deserialize(fe);
        static List<string> validExtensions = new List<string> {"png", "jpg", "jpeg", "bmp" };

        public static List<string> GetImagePaths(string[] classNames)
        {
            List<string> imagePaths = new List<string>();
            foreach (var className in classNames)
            {
                var classDir = rootDir + className;
                string[] classFilePaths = Directory.GetFiles(classDir);
                foreach (var filePath in classFilePaths)
                {
                    var splits = filePath.Split('.');
                    string ext = splits[splits.Length - 1].ToLower();
                    if (!validExtensions.Contains(ext))
                    {
                        Console.WriteLine("Skipping file: " + filePath);
                        continue;
                    }
                    imagePaths.Add(filePath);
                }
            }
            
            return imagePaths;
        }

        public static float GetMatches(List<Matrix<float>> known, Matrix<float> unknown)
        {
            float threshold = 0.6f;
            float sum = 0.0f;
            foreach(var k in known)
            {
                var n1 = np.array(k.ToArray());
                var n2 = np.array(unknown.ToArray());
                var dif = n2 - n1;
                var distance = float.Parse(np.linalg.norm(dif).repr); 
                if (distance <= threshold)
                    sum += distance;
            }
            
            return sum;
        }

        public static List<Matrix<float>> FaceEncoding(string image)
        {
            var img = Dlib.LoadImageAsMatrix<RgbPixel>(image);
            List<Matrix<float>> list = new List<Matrix<float>>();
            foreach (var landmark in FaceLandmarks(img))
            {
                var face = faceEncoder.Operator(landmark);
                list.Add(face[0]);
            }
            if (list.Count == 0) 
                Console.WriteLine("Faces not found");
            return list;
            
        }

        public static List<Matrix<RgbPixel>> FaceLandmarks(Matrix<RgbPixel> image)
        {
            List<Matrix<RgbPixel>> list = new List<Matrix<RgbPixel>>();
            foreach(var rect in FaceRects(image))
            {
                var shape = shapePredictor.Detect(image, rect);
                var faceChipDetail = Dlib.GetFaceChipDetails(shape, 150, 0.25);
                var faceChip = Dlib.ExtractImageChip<RgbPixel>(image, faceChipDetail);
                list.Add(faceChip);
            }
            return list;
        }

        public static Rectangle[] FaceRects(string image)
        {
            var img = Dlib.LoadImageAsMatrix<RgbPixel>(image);
            return FaceRects(img);
        }

        public static Rectangle[] FaceRects(Matrix<RgbPixel> image)
        {
            return faceDetector.Operator(image);
        }
    }
}


------------
[FaceEncoding.cs]:
------------

using DlibDotNet;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

namespace Lab
{
    class FaceEncoding
    {
        static string save = Utils.dir + "NotPickle.dat";
        static void Serealize(Dictionary<string, List<Matrix<float>>> encodings)
        {
            Dictionary<string, List<float[]>> converted = new Dictionary<string, List<float[]>>();
            foreach(var encode in encodings)
            {
                List<float[]> list = new List<float[]>();
                foreach(var row in encode.Value)
                    list.Add(row.ToArray());
                converted.Add(encode.Key, list);
            }
            FileStream fs = new FileStream(save, FileMode.Create);
            BinaryFormatter formatter = new BinaryFormatter();
            try
            {
                formatter.Serialize(fs, converted);
            }
            catch (SerializationException e)
            {
                Console.WriteLine("Failed to serialize. Reason: " + e.Message);
                throw;
            }
            finally
            {
                fs.Close();
            }
        }

        public static Dictionary<string, List<Matrix<float>>> Deserialize()
        {
            Dictionary<string, List<Matrix<float>>> converted = new Dictionary<string, List<Matrix<float>>>();
            Dictionary<string, List<float[]>> encodings = new Dictionary<string, List<float[]>>();
            FileStream fs = new FileStream(save, FileMode.Open);
            try
            {
                BinaryFormatter formatter = new BinaryFormatter();
                encodings = (Dictionary<string, List<float[]>>)formatter.Deserialize(fs);
                foreach (var encode in encodings)
                {
                    List<Matrix<float>> list = new List<Matrix<float>>();
                    foreach (var row in encode.Value)
                    {
                        var newOne = new Matrix<float>(row, 1, 128);
                        list.Add(newOne);
                    }
                        
                    converted.Add(encode.Key, list);
                }
            }
            catch (SerializationException e)
            {
                Console.WriteLine("Failed to deserialize. Reason: " + e.Message);
                throw;
            }
            finally
            {
                fs.Close();
            }
            return converted;
        }

        public FaceEncoding()
        {
            DirectoryInfo[] directories = new DirectoryInfo(Utils.rootDir).GetDirectories();
            string[] dirs = Array.ConvertAll(directories, item => item.Name);
            List<string> imagePaths = Utils.GetImagePaths(dirs);
            Dictionary<string, List<Matrix<float>>> nameEncodingsDict = new Dictionary<string, List<Matrix<float>>>();
            int currentImage = 1;
            foreach(var image in imagePaths)
            {
                Console.WriteLine("Image Processed: " + currentImage++ + "/" + imagePaths.Count);
                var encoding = Utils.FaceEncoding(image);
                string[] splits = image.Split("\\");
                string name = splits[splits.Length-2];
                List<Matrix<float>> e = new List<Matrix<float>>();
                if (!nameEncodingsDict.ContainsKey(name))
                    nameEncodingsDict.Add(name, e);
                else
                    e = nameEncodingsDict[name];

                e.AddRange(encoding);
                nameEncodingsDict[name] = e;
            }
            Serealize(nameEncodingsDict);
        }
    }
}


------------
[FaceRecognitionImages.cs]:
------------

using Emgu.CV;
using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using System.Collections.Generic;

namespace Lab
{
    class FaceRecognitionImages
    {
        public string example = Utils.dir + "examples\\2.jpg";
        MCvScalar red = new MCvScalar(0, 0, 222);
        public FaceRecognitionImages()
        {
            List<string> names = new List<string>();
            Dictionary<string, List<DlibDotNet.Matrix<float>>> personEncodings;
            personEncodings = FaceEncoding.Deserialize();
            var image = CvInvoke.Imread(example);

            var encoding = Utils.FaceEncoding(example);
            foreach(var encode in encoding)
            {
                Dictionary<string, float> counts = new Dictionary<string, float>();
                foreach (var person in personEncodings)
                {
                    float count = Utils.GetMatches(person.Value, encode);
                    if (!counts.ContainsKey(person.Key))
                        counts.Add(person.Key, count);
                    else
                        counts[person.Key] = count;
                }

                string match = "Unknown";
                float checker = 0.0f;
                foreach(var count in counts)
                {
                    if(count.Value > checker)
                    {
                        checker = count.Value;
                        match = count.Key;
                    }
                }
                names.Add(match);
            }

            var rects = Utils.FaceRects(example);
            for(int i = 0; i < rects.Length; i++)
            {
                var rect = rects[i];
                var name = "";
                if (names.Count > i) name = names[i];

                var convertedRect = new System.Drawing.Rectangle(rect.TopLeft.X, 
                    rect.TopLeft.Y, (int)rect.Width, (int)rect.Height);
                var textPoint = new System.Drawing.Point(rect.Left, rect.Top - 10);
                CvInvoke.Rectangle(image, convertedRect, red, 2) ;
                CvInvoke.PutText(image, name, textPoint,
                FontFace.HersheyScriptComplex, 1, red) ;
            }

            CvInvoke.Imshow("Face Detection", image);
            CvInvoke.WaitKey();
            CvInvoke.DestroyAllWindows();
        }
    }
}